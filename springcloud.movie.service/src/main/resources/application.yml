server:
  port: 9000
eureka:
  client:
    service-url:
      defaultZone: http://admin:admin@localhost:8761/eureka/
security:
  oauth2:
    resource:
      user-info-uri: http://localhost:9099/user/
    client:
      access-token-uri: http://localhost:9099/user/
spring:
  application:
    name: springcloud.movie.service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
# 指定服务负载均衡策略为轮询
# BestAvailableRule 选择一个最小的并发请求的server
# AvailabilityFilteringRule 过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（active connections 超过配置的阈值）
# WeightedResponseTimeRule 根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低
# RetryRule 对选定的负载均衡策略机上重试机制
# RoundRobinRule 轮询选择server
# RandomRule 随机选择一个server
# ZoneAvoidanceRule 复合判断server所在区域的性能和server的可用性选择server
springcloud.user.service:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream, health, info
# 使用feign+hystrix断路时必须增加以下配置，否则不会生效
feign:
  hystrix:
    enabled: true
#Hystrix THREAD模式下，feign无法找到上下文中的令牌，导致令牌无法传递
#方案一：自定义HystrixConcurrencyStrategy
#方案二：将线程策略设置为SEMAPHORE（官方不推荐）
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 3000
          strategy: SEMAPHORE
